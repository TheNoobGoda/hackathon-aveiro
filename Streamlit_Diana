
import requests
from bs4 import BeautifulSoup
import streamlit as st

# Fun√ß√£o para obter dados de qualidade do ar
def get_air_quality_data():
    url = "https://www.accuweather.com/pt/pt/aveiro/271914/air-quality-index/271914"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    }

    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        soup = BeautifulSoup(response.content, 'html.parser')

        air_quality_header = soup.find('h2', class_='air-quality-card__header')
        date_wrapper = soup.find('div', class_='date-wrapper')
        aqi_element = soup.find('div', class_='aq-number')
        quality_type_element = soup.find('p', class_='category-text')  

        air_quality = air_quality_header.get_text(strip=True) if air_quality_header else 'T√≠tulo n√£o encontrado'
        date = " ".join(date_wrapper.stripped_strings) if date_wrapper else 'Data n√£o encontrada'
        aqi_value = aqi_element.get_text(strip=True) if aqi_element else 'AQI n√£o encontrado'
        quality_type = quality_type_element.get_text(strip=True) if quality_type_element else 'Tipo de qualidade do ar n√£o encontrado' 

        return air_quality, date, aqi_value, quality_type

    except Exception as e:
        return "Erro ao obter os dados", "", "", ""

# Fun√ß√£o para obter eventos de Aveiro
def get_aveiro_events():
    url = "https://www.viralagenda.com/pt/aveiro"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    }

    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        soup = BeautifulSoup(response.content, 'html.parser')

        events = soup.find_all('li', class_='viral-item')
        event_list = []

        for event in events:
            title_element = event.find('span', itemprop='name')
            title = title_element.get_text(strip=True) if title_element else 'T√≠tulo n√£o encontrado'

            start_time_element = event.find('time', itemprop='startDate')
            start_date = start_time_element['datetime'].split("T")[0] if start_time_element else 'Data de in√≠cio n√£o encontrada'

            event_hour_element = event.find('div', class_='viral-event-hour')
            event_hour = event_hour_element.get_text(strip=True) if event_hour_element else 'Hora n√£o encontrada'

            location_element = event.find('a', itemprop='location')
            location = location_element.get_text(strip=True) if location_element else 'Local n√£o encontrado'

            category_element = event.find('a', title="Ver eventos desta categoria")
            category = category_element.get_text(strip=True) if category_element else 'Categoria n√£o encontrada'

            event_list.append({
                'title': title,
                'date': start_date,
                'hour': event_hour,
                'location': location,
                'category': category
            })

        return event_list

    except Exception as e:
        return []

# Fun√ß√£o para obter dados meteorol√≥gicos
def get_weather_data():
    url = "https://www.accuweather.com/pt/pt/aveiro/271914/daily-weather-forecast/271914"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    }

    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        soup = BeautifulSoup(response.content, 'html.parser')

        daily_card = soup.find('div', class_='daily-wrapper')

        if daily_card:
            day_info = daily_card.find('h2', class_='date')
            temp = daily_card.find('div', class_='temp')
            high_temp = temp.find('span', class_='high').get_text(strip=True) if temp else 'Temp alta n√£o encontrada'
            low_temp = temp.find('span', class_='low').get_text(strip=True) if temp else 'Temp baixa n√£o encontrada'
            precip_element = daily_card.find('div', class_='precip')
            precip_prob = precip_element.get_text(strip=True) if precip_element else 'Probabilidade de precipita√ß√£o n√£o encontrada'

            return {
                'day_info': day_info.get_text(strip=True) if day_info else 'Dia n√£o encontrado',
                'high_temp': high_temp,
                'low_temp': low_temp,
                'precip_prob': precip_prob
            }

        else:
            return None

    except Exception as e:
        return None
    
#########################################################################################################

# Fun√ß√£o para fornecer dados tur√≠sticos predefinidos (roteiro)
def get_tourism_data():
    # List of main monuments
    monuments = [
        {
            'name': 'S√© de Aveiro',
            'description': 'A historical cathedral with impressive Baroque architecture.',
            'address': 'R. Batalh√£o Ca√ßadores 10, 3810-164 Aveiro'
        },
        {
            'name': 'F√≥rum Aveiro',
            'description': 'A popular shopping mall in the city center, known for its open-air spaces and modern design.',
            'address': 'R. de Viseu 1, 3800-230 Aveiro'
        },
        {
            'name': 'Museu de Aveiro',
            'description': 'Museum housed in a former convent, featuring art and historical exhibits about Aveiro.',
            'address': 'Av. Santa Joana Princesa, 3810-329 Aveiro'
        }
    ]

    # List of museums
    museums = [
        {
            'name': 'Museu Mar√≠timo de √çlhavo',
            'description': 'Dedicated to Aveiro‚Äôs maritime history and fishing traditions, with exhibitions on cod fishing.',
            'address': 'Av. Dr. Rocha Madahil, 3830-193 √çlhavo'
        },
        {
            'name': 'Museu Arte Nova',
            'description': 'Art Nouveau museum located in a historical building, showcasing a variety of period artworks.',
            'address': 'R. Dr. Barbosa de Magalh√£es 9-11, 3800-154 Aveiro'
        }
    ]

    # List of popular restaurants
    restaurants = [
        {
            'name': 'Salpoente',
            'type': 'Gourmet Seafood',
            'address': 'Cais de S√£o Roque 83, 3800-256 Aveiro'
        },
        {
            'name': 'O Bairro',
            'type': 'Traditional Portuguese',
            'address': 'R. Ant√≥nio C√¢ndido Pinto 7, 3800-139 Aveiro'
        },
        {
            'name': 'Cais Madeirense',
            'type': 'Madeiran Cuisine',
            'address': 'Largo do Rossio 1, 3800-246 Aveiro'
        }
    ]

    # List of things to do
    activities = [
        {
            'name': 'Passeio de Moliceiro',
            'description': 'Take a boat trip through the canals of Aveiro in a traditional Moliceiro, discovering the "Venice of Portugal".'
        },
        {
            'name': 'Visitar a Praia da Barra',
            'description': 'Relax at the Praia da Barra, known for its iconic lighthouse and beautiful long stretch of beach.'
        },
        {
            'name': 'Explorar as Salinas de Aveiro',
            'description': 'Visit the salt pans and learn about traditional salt extraction methods that date back centuries.'
        }
    ]

    return {
        'monuments': monuments,
        'museums': museums,
        'restaurants': restaurants,
        'activities': activities
    }


# Fun√ß√£o para interpretar a pesquisa do usu√°rio
def handle_search(query):
    query = query.lower()
    if "qualidade do ar" in query:
        return "Voc√™ pode verificar a qualidade do ar clicando no bot√£o 'Qualidade do Ar'."
    elif "tempo" in query or "meteorologia" in query:
        return "Confira a previs√£o do tempo clicando no bot√£o 'Meteorologia'."
    elif "eventos" in query:
        return "Descubra os eventos mais recentes clicando no bot√£o 'Eventos'."
    else:
        return "Desculpe, n√£o entendi a pesquisa. Tente usar termos como 'qualidade do ar', 'tempo' ou 'eventos'."

# Interface do Streamlit com Emojis ‚ú®
st.title("‚ú® Sugest√µes de Pesquisas ‚ú®")

# Barra de pesquisa
st.write("Pesquise sobre qualidade do ar, eventos ou meteorologia:")
search_query = st.text_input("Digite sua pesquisa:")

# Placeholder para a resposta da pesquisa
if search_query:
    search_response = handle_search(search_query)
    st.write(search_response)

st.write("Escolha uma op√ß√£o para visualizar as informa√ß√µes:")
col1, col2, col3, col4, col5 = st.columns(5)

# Placeholder para exibir transi√ß√µes
placeholder = st.empty()


# Bot√£o para Qualidade do Ar
with col1:
    if st.button("Qualidade do Ar"):
        placeholder.empty()  # Limpar qualquer conte√∫do anterior
        with placeholder.container():
            st.subheader("√çndice de Qualidade do Ar - Aveiro")
            air_quality, date, aqi_value, quality_type = get_air_quality_data()

            if air_quality != "Erro ao obter os dados":
                st.write(f"üåç **{air_quality}**")
                st.write(f"üìÖ Data: {date}")
                st.write(f"üå°Ô∏è √çndice de Qualidade do Ar: {aqi_value}")
                st.write(f"üîé Tipo de Qualidade do Ar: {quality_type}")
            else:
                st.error("Erro ao obter os dados de qualidade do ar.")

# Bot√£o para Eventos
with col2:
    if st.button("Eventos"):
        placeholder.empty()  # Limpar qualquer conte√∫do anterior
        with placeholder.container():
            st.subheader("üìÖ Eventos em Aveiro")
            events = get_aveiro_events()

            if events:
                for event in events:
                    st.write(f"üéâ **T√≠tulo**: {event['title']}")
                    st.write(f"üìÜ **Data**: {event['date']}")
                    st.write(f"‚è∞ **Hora**: {event['hour']}")
                    st.write(f"üìç **Local**: {event['location']}")
                    st.write(f"üè∑Ô∏è **Categoria**: {event['category']}")
                    st.write("---")
            else:
                st.error("Erro ao obter os eventos ou nenhum evento encontrado.")

# Bot√£o para Meteorologia
with col3:
    if st.button("Meteorologia"):
        placeholder.empty()  # Limpar qualquer conte√∫do anterior
        with placeholder.container():
            st.subheader("üå§Ô∏è Previs√£o do Tempo em Aveiro")
            weather = get_weather_data()

            if weather:
                st.write(f"üìÖ **Dia**: {weather['day_info']}")
                st.write(f"üå°Ô∏è **Temperatura M√°xima**: {weather['high_temp']}")
                st.write(f"üå°Ô∏è **Temperatura M√≠nima**: {weather['low_temp']}")
                st.write(f"‚òî **Probabilidade de Precipita√ß√£o**: {weather['precip_prob']}")
            else:
                st.error("Erro ao obter os dados meteorol√≥gicos.")




with col4:
    with st.container():
        if st.button("Servi√ßos P√∫blicos"):
            placeholder.empty()  # Limpar qualquer conte√∫do anterior
            with placeholder.container():
                st.subheader("üèõÔ∏è Servi√ßos P√∫blicos")

                # Op√ß√µes de servi√ßos p√∫blicos
                service_options = ["Sa√∫de", "Documenta√ß√£o", "Escola", "N√∫meros telef√≥nicos √∫teis"]
                
                # Permitir sele√ß√£o de servi√ßo
                selected_service = st.radio("Escolha um servi√ßo:", service_options)

                # Exibi√ß√£o das informa√ß√µes conforme a op√ß√£o escolhida
                if selected_service == "Sa√∫de":
                    st.subheader("üè• Servi√ßos de Sa√∫de")
                    st.write("üìû Em caso de emerg√™ncia, ligue para o n√∫mero: **SNS 24 - 808 24 24 24**")
                    st.write("üè• **Hospitais P√∫blicos em Aveiro:**")
                    st.write("1. **Hospital Infante D. Pedro** - Avenida da Rep√∫blica, 3810-200 Aveiro")
                    st.write("2. **Hospital de S√£o Sebasti√£o** - R. Dr. Miguel Bombarda 119, 3800-220 Aveiro")
                    st.write("3. **Centro de Sa√∫de de Aveiro** - R. de S√£o Bernardo, 3810-207 Aveiro")

                elif selected_service == "Documenta√ß√£o":
                    st.subheader("üìÑ Informa√ß√µes sobre Documenta√ß√£o")
                    st.write("Aqui est√£o algumas informa√ß√µes sobre servi√ßos de documenta√ß√£o em Aveiro:")
                    st.write("1. **Cart√≥rio Notarial:**")
                    st.write("   - Realiza atos notariais, como escrituras e reconhecimento de assinaturas.")
                    st.write("   - Endere√ßo: R. de Viseu, 3800-230 Aveiro")
                    st.write("2. **Conservat√≥ria do Registo Civil:**")
                    st.write("   - Trata do registo de nascimentos, casamentos e √≥bitos.")
                    st.write("   - Endere√ßo: R. de Cinf√£es, 3800-101 Aveiro")
                    st.write("3. **C√¢mara Municipal de Aveiro:**")
                    st.write("   - Oferece servi√ßos de licenciamento e documenta√ß√£o municipal.")
                    st.write("   - Endere√ßo: Av. de Portugal, 3800-202 Aveiro")

                elif selected_service == "Escola":
                    st.subheader("üè´ Informa√ß√µes sobre Escolas")
                    st.write("Aqui est√£o algumas informa√ß√µes sobre escolas p√∫blicas, privadas e papelarias em Aveiro.")
                    st.write("1. **Escola Secund√°ria de Aveiro**")
                    st.write("   - Endere√ßo: R. das Olas, 3810-016 Aveiro")
                    st.write("2. **Escola B√°sica de Cacia**")
                    st.write("   - Endere√ßo: R. da Escola, 3830-070 Cacia")
                    st.write("3. **Papelaria da Pra√ßa**")
                    st.write("   - Oferece material escolar e servi√ßos de impress√£o.")
                    st.write("   - Endere√ßo: Pra√ßa do Mercado, 3800-200 Aveiro")

                elif selected_service == "N√∫meros telef√≥nicos √∫teis":
                    st.subheader("üìû Informa√ß√µes sobre N√∫meros Telef√≥nicos √öteis")
                    st.write("Aqui est√£o alguns n√∫meros telef√≥nicos √∫teis em Aveiro.")
                    st.write("1. **Pol√≠cia:** 112")
                    st.write("2. **Bombeiros:** 117")
                    st.write("3. **Hospital Infante D. Pedro:** 234 420 000")
                    st.write("4. **Centro de Sa√∫de de Aveiro:** 234 424 200")



with col5:
    if st.button("Roteiro Tur√≠stico"):
        placeholder.empty()  # Limpar qualquer conte√∫do anterior
        with placeholder.container():
            st.subheader("üó∫Ô∏è Roteiro Tur√≠stico de Aveiro")
            
            tourism_data = get_tourism_data()
            
            st.write("### üèõÔ∏è Principais Monumentos:")
            for monument in tourism_data['monuments']:
                st.write(f"**{monument['name']}**: {monument['description']}")
                st.write(f"üìç Endere√ßo: {monument['address']}")
                st.write("---")
            
            st.write("### üñºÔ∏è Museus:")
            for museum in tourism_data['museums']:
                st.write(f"**{museum['name']}**: {museum['description']}")
                st.write(f"üìç Endere√ßo: {museum['address']}")
                st.write("---")

            st.write("### üçΩÔ∏è Restaurantes Recomendados:")
            for restaurant in tourism_data['restaurants']:
                st.write(f"**{restaurant['name']}** ({restaurant['type']})")
                st.write(f"üìç Endere√ßo: {restaurant['address']}")
                st.write("---")
            
            st.write("### üéâ Atividades Imperd√≠veis:")
            for activity in tourism_data['activities']:
                st.write(f"**{activity['name']}**: {activity['description']}")
                st.write("---")
